DROP TABLE IF EXISTS BOOKS;
 CREATE TABLE BOOKS ( BOOK_ID INT PRIMARY KEY, TITLE VARCHAR (100),
 AUTHOR VARCHAR(100),
 GENRE VARCHAR (100), 
 PUBLISHED_YEAR INT, 
 PRICE NUMERIC(10,2), 
 STOCK INT);
 
 DROP TABLE IF EXISTS CUSTOMERS; 
 CREATE TABLE CUSTOMERS ( CUSTOMER_ID INT PRIMARY KEY
 , NAME VARCHAR (100), 
 EMAIL VARCHAR(100), 
 PHONE INT,
 CITY VARCHAR(100), 
 COUNTRY VARCHAR(100)); 
 
 
 DROP TABLE if exists ORDERS; 
 CREATE TABLE ORDERS ( ORDER_ID INT PRIMARY KEY,
 CUSTOMER_ID INT REFERENCES CUSTOMERS(CUSTOMER_ID),
 BOOK_ID INT REFERENCES BOOKS(BOOK_ID)
 , ORDER_DATE DATE, QUANTITY INT,
 TOTAL_AMOUNT NUMERIC(10,2)); 
 
 
 SELECT * FROM BOOKS; 
 SELECT * FROM CUSTOMERS;
 SELECT * FROM ORDERS; 
 
 -- 1)RETRIEVE ALL BOOKS IN THE FICTION GENRE:
 SELECT BOOK_ID,TITLE,GENRE 
 FROM BOOKS
 WHERE GENRE="FICTION"; 
 
 
-- 2)FIND NUMBER OF BOOKS IN THE FICTION GENRE: 
SELECT COUNT(GENRE) 
FROM BOOKS
 WHERE GENRE="FICTION"; 
 
 
 -- 3)FIND BOOKS PUBLISHED AFTER THE YEAR 1950:
 SELECT * FROM BOOKS
 WHERE PUBLISHED_YEAR>1950;
 
 
 -- 4)LIST ALL THE CUSTOMERS FROM THE CANANDA: 
 SELECT * FROM CUSTOMERS
 WHERE COUNTRY='CANADA';
 
 
 -- 5)SHOW ORDERS PLACED IN NOVEMBER 2023: 
 SELECT * FROM ORDERS
 WHERE ORDER_DATE BETWEEN '2023-11-01'
 AND  '2023-11-30';
 
 
 -- 6)RETRIEVE THE TOTAL STOCK OF BOOKS AVAILABLE: 
 SELECT SUM(STOCK) AS TOTAL_STOCK
 FROM BOOKS;
 
 
 -- 7)FIND THE DETAILS OF THE MOST EXPENSIVE BOOK:
 SELECT * FROM BOOKS
 WHERE PRICE=(SELECT MAX(PRICE) FROM BOOKS); 
 -- (OR) 
 SELECT * FROM BOOKS ORDER BY PRICE DESC LIMIT 1;
 
 
 -- 8)SHOW NAMES OF ALL CUSTOMERS WHO ORDERED MORE THAN ONE QUANTITY OF A BOOK: 
 SELECT C.NAME, B.BOOK_ID,B.TITLE,O.QUANTITY
 FROM ORDERS AS O
 JOIN CUSTOMERS AS C
 ON O.CUSTOMER_ID=C.CUSTOMER_ID
 JOIN BOOKS AS B ON O.BOOK_ID=B.BOOK_ID
 WHERE QUANTITY>1 
 
 
 -- 9)RETRIEVE ALL ORDERS WHERE TOTAL AMOUNT EXCEEDS $20:
 SELECT * FROM ORDERS
 WHERE TOTAL_AMOUNT > 20; 
 
 
-- 10)LIST ALL GENRES AVAILABLE IN THE BOOKS TABLE: 
SELECT DISTINCT GENRE FROM BOOKS;


 -- 11)FIND THE BOOK WITH THE LOWEST STOCK: 
 SELECT * FROM BOOKS 
 ORDER BY STOCK 
 ASC LIMIT 1;
 -- (OR) 
 SELECT * FROM BOOKS 
 WHERE STOCK=(SELECT MIN(STOCK) 
 FROM BOOKS);
 
 
 -- 12)CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS: 
 SELECT sum(TOTAL_AMOUNT) AS TOTAL_REVENUE
 FROM ORDERS;
 
 
 -- 13)RETRIEVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE:
 SELECT B.GENRE,SUM(O.QUANTITY) 
 AS TOTAL_BOOKS_SOLD
 FROM ORDERS AS O
 JOIN
 BOOKS AS B ON O.BOOK_ID=B.BOOK_ID 
 GROUP BY B.GENRE; 
 
 
 -- 14)FIND THE AVERAGE PRICE OF THE BOOKS IN THE "FANTASY" GENRE:
 SELECT AVG(PRICE) AS AVERAGE_PRICE 
 FROM BOOKS
 WHERE GENRE='FANTASY'; 
 
 
 -- 15)LIST CUSTOMERS WHO HAVE PLACED AT LEAST TWO ORDERS: 
 SELECT C.NAME,count(O.CUSTOMER_ID) AS TOTAL_ORDERS 
 FROM CUSTOMERS AS C
 JOIN
 ORDERS AS O
 ON C.CUSTOMER_ID=O.CUSTOMER_ID
 GROUP BY C.NAME 
 HAVING TOTAL_ORDERS >1;
 
 
 -- 16) FIND THE MOST FREQUENTLY ORDERED BOOK:
 SELECT BOOKS.TITLE,ORDERS.BOOK_ID,COUNT(ORDERS.BOOK_ID) 
 FROM ORDERS
 JOIN BOOKS
 ON ORDERS.BOOK_ID=BOOKS.BOOK_ID 
 GROUP BY BOOK_ID 
 ORDER BY COUNT(BOOK_ID)
 DESC LIMIT 1; 
 
 
 -- 17)SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF 'FANTASY' GENRE:
 SELECT BOOK_ID,TITLE,GENRE,PRICE 
 FROM BOOKS 
 WHERE GENRE='FANTASY' 
 ORDER BY PRICE
 DESC LIMIT 3; 
 
 
 -- 18)RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR: 
 SELECT B.AUTHOR, SUM(O.QUANTITY)
 FROM BOOKS AS B 
 JOIN ORDERS AS O
 ON B.BOOK_ID=O.BOOK_ID
 GROUP BY B.AUTHOR;
 
 
 -- 19) LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED: 
 SELECT DISTINCT C.CITY,C.CUSTOMER_ID,C.NAME,
 TOTAL_AMOUNT AS AMOUNT_SPENT 
 FROM 
 CUSTOMERS AS C
 JOIN 
 ORDERS AS O 
 ON C.CUSTOMER_ID=O.CUSTOMER_ID
 WHERE O.TOTAL_AMOUNT>30; 
 
 
 -- 20)FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS:
 SELECT C.NAME, SUM(O.TOTAL_AMOUNT) 
 AS AMOUNT_SPENT 
 FROM CUSTOMERS AS C 
 JOIN 
 ORDERS AS O 
 ON C.CUSTOMER_ID = O.CUSTOMER_ID 
 GROUP BY C.NAME
 ORDER BY AMOUNT_SPENT 
 DESC LIMIT 1;
 
 
 -- 21)CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS: 
 SELECT B.BOOK_ID,B.TITLE,B.STOCK,
 SUM(O.QUANTITY), B.STOCK-SUM(O.QUANTITY) AS STOCK_REMAINING
 FROM BOOKS AS B 
 JOIN 
 ORDERS AS O 
 ON B.BOOK_ID=O.BOOK_ID 
 GROUP BY B.BOOK_ID 
 ORDER BY B.BOOK_ID;